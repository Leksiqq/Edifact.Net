<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="UNKNOWN_SEGMENT" xml:space="preserve">
    <value>Unknown segment '{0}' was found at line {L0}, col {C0}.</value>
  </data>
  <data name="UNEXPECTED_SEGMENT" xml:space="preserve">
    <value>Unexpected segment '{0}' was found at line {L0}, col {C0}.</value>
  </data>
  <data name="EXPECTED_ELEMENT_NOT_FOUND" xml:space="preserve">
    <value>Mandatory element '{0}/{1}' was not found at line {L0}, col {C0}.</value>
  </data>
  <data name="EXPECTED_SUB_ELEMENT_NOT_FOUND" xml:space="preserve">
    <value>Mandatory sub-element '{0}/{1}/{2}' was not found at line {L0}, col {C0}.</value>
  </data>
  <data name="EXTRA_SUB_ELEMENT_FOUND" xml:space="preserve">
    <value>Extra sub-element of '{0}/{1}' was found at line {L0}, col {C0}.</value>
  </data>
  <data name="EXTRA_ELEMENT_FOUND" xml:space="preserve">
    <value>Extra element of '{0}' was found at line {L0}, col {C0}.</value>
  </data>
  <data name="FG" xml:space="preserve">
    <value>functional group: {0}</value>
  </data>
  <data name="MESS" xml:space="preserve">
    <value>message: {0}</value>
  </data>
  <data name="FG_ID_MISMATCH" xml:space="preserve">
    <value>FUNCTIONAL GROUP REFERENCE NUMBER '{0}' at line {L0}, col {C0} mismatches '{1}' at line {L1}, col {C1}.</value>
  </data>
  <data name="MESSAGE_ID_MISMATCH" xml:space="preserve">
    <value>MESSAGE REFERENCE NUMBER '{0}' at line {L0}, col {C0} mismatches '{1}' at line {L1}, col {C1}.</value>
  </data>
  <data name="NUMBER_OF_SEGMENTS_MISMATCH" xml:space="preserve">
    <value>NUMBER OF SEGMENTS IN THE MESSAGE '{0}' at line {L0}, col {C0} mismatches actual '{1}'.</value>
  </data>
  <data name="NUMBER_OF_MESSAGES_MISMATCH" xml:space="preserve">
    <value>NUMBER OF MESSAGES '{0}' at line {L0}, col {C0} mismatches actual '{1}'.</value>
  </data>
  <data name="INTERCHANGE_ID_MISMATCH" xml:space="preserve">
    <value>INTERCHANGE CONTROL REFERENCE '{0}' at line {L0}, col {C0} mismatches '{1}' at line {L1}, col {C1}.</value>
  </data>
  <data name="INCOMPLETE_SEGMENT" xml:space="preserve">
    <value>The segment '{0}' is incomplete. List of possible elements expected: '{1}' at line {L0}, col {C0}.</value>
  </data>
  <data name="INCOMPLETE_ELEMENT" xml:space="preserve">
    <value>The segment '{0}/{1}' is incomplete. List of possible elements expected: '{2}' at line {L0}, col {C0}.</value>
  </data>
  <data name="INVALID_ELEMENT_VALUE" xml:space="preserve">
    <value>The element '{1}/{2}' has invalid value '{0}' according to its datatype at line {L0}, col {C0}.</value>
  </data>
  <data name="INVALID_SUB_ELEMENT_VALUE" xml:space="preserve">
    <value>The sub-element '{1}/{2}/{3}' has invalid value '{0}' according to its datatype at line {L0}, col {C0}.</value>
  </data>
  <data name="FAILED_UNZIP" xml:space="preserve">
    <value>Failed unzip {0}, try use external unzip program.</value>
  </data>
  <data name="USING_EXTERNAL_UNZIP" xml:space="preserve">
    <value>Using external unzip: {0}</value>
  </data>
  <data name="FILE_FOR_DIRECTORY_NOT_FOUND" xml:space="preserve">
    <value>'{0}' File for directory '{1}' not found.</value>
  </data>
  <data name="UNSL_MESSAGE" xml:space="preserve">
    <value>{0}: using 'unsl' File for directory '{1}'.</value>
  </data>
  <data name="RECEIVING_DIRECTORY" xml:space="preserve">
    <value>Receiving directory: {0}</value>
  </data>
  <data name="DIRECTORY_NOT_FOUND" xml:space="preserve">
    <value>Directory '{0}' not found.</value>
  </data>
  <data name="NO_ENUM_SIMPLE_TYPES" xml:space="preserve">
    <value>{0}: no simple types with enumeration found.</value>
  </data>
  <data name="MESSAGE_NOT_FOUND" xml:space="preserve">
    <value>File '{0}' for directory '{1}' not found.</value>
  </data>
  <data name="LOAD_FIXED_FILE" xml:space="preserve">
    <value>Loading fixed file: {0}.</value>
  </data>
  <data name="INVALID_STRUCTURE" xml:space="preserve">
    <value>Invalid structure.</value>
  </data>
  <data name="EXCEPTION_PARSING_MESSAGE" xml:space="preserve">
    <value>Error while building message '{0}' for directory '{1}' at {2}:{3}</value>
  </data>
  <data name="NO_ITEMS_FOR_ELEMENT" xml:space="preserve">
    <value>'{0}': no items for element '{1}' found.</value>
  </data>
  <data name="NO_ITEMS_FOR_COMPLEX_TYPE" xml:space="preserve">
    <value>'{0}': no items for complex type '{1}' found.</value>
  </data>
  <data name="NO_SIMPLE_TYPES" xml:space="preserve">
    <value>'{0}': no simple types found. </value>
  </data>
  <data name="DESC_NOT_FOUND" xml:space="preserve">
    <value>{0}: 'Desc:' not found.</value>
  </data>
</root>